version: 2.1

executors:
  arm64:
    machine:
      image: ubuntu-2004:202104-01
      docker_layer_caching: true
    resource_class: arm.medium
  x86_64:
    machine:
      image: ubuntu-2004:202104-01
      docker_layer_caching: true
    resource_class: medium

jobs:
  test:
    parameters:
      arch:
        type: executor
    executor: << parameters.arch >>
    environment:
      - CIRCLECI_WORKSPACE: /home/circleci/project
    steps:
      - checkout
      - run: docker version
      - run: make ci:diff
      - run:
          command: |
            ARCH=`make arch`
            EXTENSION=`make extension`

            make ci:diff | while read DIR; do
              cd ${CIRCLECI_WORKSPACE}/${DIR}
              if find . -type f -name "Dockerfile${EXTENSION}" | grep Dockerfile ; then
                make build;
                make test;
              else
                echo "${DIR} is ${ARCH} not supported. make build & make test was skipped.";
              fi
            done

      - run:
          name: Notification failed
          command: |
            if [ "${CIRCLE_PR_USERNAME}" == "cw-circleci" ]; then
              make ci:notify -e TITLE="CircleCI: Failed to CI of PR created by automatic update of dependency (devil)" \
                        -e BODY="${CIRCLE_PULL_REQUEST}";
            fi
          when: on_fail

  push:
    parameters:
      arch:
        type: executor
    executor: << parameters.arch >>
    environment:
        - CIRCLECI_WORKSPACE: /home/circleci/project
    steps:
      - checkout
      - run: docker version
      - run: docker login -u="${DOCKER_REGISTRY_USERNAME}" -p="${DOCKER_REGISTRY_PASSWORD}"
      - run: make ci:diff
      - run:
          command: |
            ARCH=`make arch`
            EXTENSION=`make extension`

            make ci:diff | while read DIR; do
              cd ${CIRCLECI_WORKSPACE}/${DIR}
              if find . -type f -name "Dockerfile${EXTENSION}" | grep Dockerfile ; then
                make build;
              else
                echo "${DIR} is ${ARCH} not supported. make build & make test was skipped.";
              fi
            done

      - run:
          name: notification failed
          command: |
            make ci:diff | xargs -I{} /bin/bash -c '
              version=$(docker inspect -f "{{.Config.Labels.version}}" chatwork/{});
              if [ "$(docker inspect --format="{{json .RepoDigests}}" chatwork/{}:${version})" != "[]" ]; then
                changelog=$(make ci:changelog -e DIR="{}/");
                make ci:notify -e TITLE="Release chatwork/{}:${version} (gogo)" \
                               -e BODY="$(echo -e "changelog\n${changelog}")";
              else
                make ci:notify -e TITLE="CircleCI: Failed push chatwork/{}:${version} (devil)" \
                               -e BODY="$(git log -1 --pretty=format:"%h - %an : %s" ${CIRCLE_BRANCH})";
              fi
            '
          when: on_fail
      - run:
          name: notification success
          command: |
            make ci:diff | xargs -I{} /bin/bash -c '
              version=$(docker inspect -f {{.Config.Labels.version}} chatwork/{});
              changelog=$(make ci:changelog -e DIR="{}/");
              make ci:notify -e TITLE="Release chatwork/{}:${version} arch: $(make arch) (gogo)" \
                             -e BODY="$(echo -e "changelog\n${changelog}")";
            '
          when: on_success
  mod:
    docker:
      - image: variantdev/mod:0.19.0
    environment:
      - CIRCLECI_WORKSPACE: /root/project
    steps:
      - checkout
      - run:
          name: Docker login
          command: |
            mkdir -p ${HOME}/.docker
            cat \<<EOS > ${HOME}/.docker/config.json
            {
                "auths": {
                    "https://index.docker.io/v1/": {
                        "auth": "$(echo -n "${DOCKER_REGISTRY_USERNAME}:${DOCKER_REGISTRY_PASSWORD}" | base64)",
                        "email": "server_admin+cw-circleci@chatwork.com"
                    }
                }
            }
            EOS
      - run:
          name: Update dependencies
          command: |
            git config --global user.email "server_admin+cw-circleci@chatwork.com"
            git config --global user.name "CircleCI"
            ls */variant.mod | xargs -I{} dirname {} | xargs -I{} /bin/bash -c 'cd {} && mod up --build  --pull-request --base master --branch 'mod-up-{}' --title "[{}] update" --skip-on-duplicate-pull-request-title'
      - run:
          name: Notification failed
          command: |
            TITLE="CircleCI: Failed update dependencies (devil)"
            BODY="Check the error from the following URL."
            curl -sS -X POST -H "X-ChatWorkToken: ${CHATWORK_API_TOKEN}" \
              "https://api.chatwork.com/v2/rooms/${CHATWORK_NOTIFICATION_ROOM_ID}/messages" \
                --data-urlencode "body=[info][title]${TITLE}[/title]${BODY}[hr]${CIRCLE_BUILD_URL}[/info]"
          when: on_fail
  merge:
    docker:
      - image: kinzal/pr:0.2.4
    environment:
      - CIRCLECI_WORKSPACE: /root/project
    steps:
      - checkout
      - run:
          name: Auto merge
          command: |
            /usr/local/bin/pr merge chatwork/dockerfiles --with-statuses --with-checks \
              -l 'state == `"open"`' \
              -l 'base.ref == `"master"`' \
              -l 'starts_with(head.ref, `"mod-up-"`)' \
              -l 'user.login == `"cw-circleci"`' \
              -l 'length(statuses[?context == `"ci/circleci: test"` && state == `"success"`]) == `1`' 2> stderr
      - run:
          name: Notification failed
          command: |
            TITLE="CircleCI: Failed auto merge (devil)"
            BODY="$(cat stderr)"
            curl -sS -X POST -H "X-ChatWorkToken: ${CHATWORK_API_TOKEN}" \
              "https://api.chatwork.com/v2/rooms/${CHATWORK_NOTIFICATION_ROOM_ID}/messages" \
                --data-urlencode "body=[info][title]${TITLE}[/title]${BODY}[hr]${CIRCLE_BUILD_URL}[/info]"
          when: on_fail
workflows:
  version: 2
  integration:
    jobs:
      - test:
          context: "chatwork_api_token@circleci"
          # see https://circleci.com/docs/2.0/configuration-reference/#matrix-requires-version-21
          matrix:
            parameters:
              arch: [ x86_64, arm64 ]
      - push:
          context: "chatwork_api_token@circleci"
          requires:
            - test
          matrix:
            parameters:
              arch: [ x86_64, arm64 ]
          #filters:
            #branches:
              #only: master

  update_dependecies:
    jobs:
      - mod:
          context: "chatwork_api_token@circleci"
    triggers:
      - schedule:
          cron: "0 * * * *"
          filters:
            branches:
              only:
                - master
  auto_merge:
    jobs:
      - merge:
          context: "chatwork_api_token@circleci"
    triggers:
      - schedule:
          cron: "0,10,20,30,40,50 * * * *"
          filters:
            branches:
              only:
                - master